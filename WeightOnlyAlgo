//C++ Implementation of Top-k geometric intersection queries motivated by ad auctions.
#include <chrono> 
#include <fstream>
#include<iostream>
#include <boost/config.hpp>
#include <boost/version.hpp>
#include <fstream>
#include <random>
#include <math.h>
#include <unistd.h>
#include <time.h>
// CGAL headers
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/Apollonius_graph_2.h>
#include <CGAL/Apollonius_graph_hierarchy_2.h>
#include <CGAL/Apollonius_graph_filtered_traits_2.h>
#include <CGAL/point_generators_2.h>
#if BOOST_VERSION >= 105600 && (! defined(BOOST_GCC) || BOOST_GCC >= 40500)
#endif

#include <boost/random/linear_congruential.hpp>
#include <boost/random/uniform_real.hpp>
#include<limits>
// Qt headers
#include <QtGui>
#include <QString>
#include <QActionGroup>
#include <QFileDialog>
#include <QInputDialog>
#include <CGAL/Qt/ApolloniusGraphGraphicsItem.h>
#include<CGAL/Qt/GraphicsViewCircleInput.h>
#include<CGAL/Voronoi_diagram_2/Apollonius_graph_nearest_site_2.h>
#include <CGAL/Simple_cartesian.h>
#include <CGAL/Qt/Converter.h>
#include <vector>

// for viewportsBbox
#include <CGAL/Qt/utility.h>
#include<CGAL/Apollonius_graph_adaptation_traits_2.h>
#include <CGAL/Qt/DemosMainWindow.h>
#include <CGAL/MP_Float.h>
#include <CGAL/Random.h>
#include <CGAL/Apollonius_graph_adaptation_policies_2.h>
#include <CGAL/Voronoi_diagram_2.h>
#include <QPointF>
#include <CGAL/Delaunay_triangulation_2.h>
#include <CGAL/Delaunay_triangulation_adaptation_traits_2.h>
#include <CGAL/Delaunay_triangulation_adaptation_policies_2.h>


typedef CGAL::Exact_predicates_inexact_constructions_kernel K;

typedef K::Point_2 Point_2;
typedef K::Iso_rectangle_2 Iso_rectangle_2;

typedef CGAL::Apollonius_graph_filtered_traits_2<K,CGAL::Integral_domain_without_division_tag>  Gt;

typedef Gt::Point_2                           Point_2;
typedef K::Circle_2                           Circle_2;
typedef Gt::Site_2                            Apollonius_site_2;
typedef Gt::Site_2::Weight                    Weight;

typedef CGAL::Apollonius_graph_2<Gt> Apollonius;


typedef Apollonius::Vertex_handle Vertex_handle;


struct Test 
{ 
   double x, y, w,price; 
};


bool compare1(Test a,Test b)
{
  if(a.w>=b.w)
    return 1;
  else
    return 0;
}


bool compare(Test a,Test b)
{
  if(a.price>=b.price)
    return 1;
  else
    return 0;
}

int partition (std::vector<Test> &arr, int low, int high)  
{  
    float pivot = arr[high].w; // pivot  
    int i = (low - 1); // Index of smaller element  
    float temp1,temp2,temp3,temp4;
    for (int j = low; j <= high - 1; j++)  
    {  
        // If current element is smaller than the pivot  
        if (arr[j].w > pivot)  
        {  
            i++; // increment index of smaller element  
            //swap(&arr[i], &arr[j]);  
            temp1 = arr[i].x;
            temp2 = arr[i].y;
            temp3 = arr[i].w;
           // temp4 = arr[i].euclid;
            arr[i].x = arr[j].x;
            arr[i].y = arr[j].y;
            arr[i].w = arr[j].w;
           // arr[i].euclid = arr[j].euclid;
            arr[j].x = temp1;
            arr[j].y = temp2;
            arr[j].w = temp3;
            //arr[j].euclid = temp4;
        }  
    }  
    //swap(&arr[i + 1], &arr[high]);  
    temp1 = arr[i+1].x;
    temp2 = arr[i+1].y;
    temp3 = arr[i+1].w;
    //temp4 = arr[i+1].euclid;
    arr[i+1].x = arr[high].x;
    arr[i+1].y = arr[high].y;
    arr[i+1].w = arr[high].w;
    //arr[i+1].euclid = arr[high].euclid;
    arr[high].x = temp1;
    arr[high].y = temp2;
    arr[high].w = temp3;
    //arr[high].euclid = temp4;
    return (i + 1);  
} 



int partitionprice (std::vector<Test> &arr, int low, int high)  
{  
    float pivot = arr[high].price; // pivot  
    int i = (low - 1); // Index of smaller element  
    float temp1,temp2,temp3,temp4;
   
    for (int j = low; j <= high - 1; j++)  
    {  
        // If current element is smaller than the pivot  
        if (arr[j].price > pivot)  
        {  
            i++; // increment index of smaller element  
            //swap(&arr[i], &arr[j]);

            temp1 = arr[i].x;
            temp2 = arr[i].y;
            temp3 = arr[i].w;
           temp4 = arr[i].price;
            arr[i].x = arr[j].x;
            arr[i].y = arr[j].y;
            arr[i].w = arr[j].w;
            arr[i].price = arr[j].price;
            arr[j].x = temp1;
            arr[j].y = temp2;
            arr[j].w = temp3;
            arr[j].price = temp4;
        }  
    }  
    //swap(&arr[i + 1], &arr[high]);  
    temp1 = arr[i+1].x;
    temp2 = arr[i+1].y;
    temp3 = arr[i+1].w;
    temp4 = arr[i+1].price;
    arr[i+1].x = arr[high].x;
    arr[i+1].y = arr[high].y;
    arr[i+1].w = arr[high].w;
    arr[i+1].price = arr[high].price;
    arr[high].x = temp1;
    arr[high].y = temp2;
    arr[high].w = temp3;
    arr[high].price = temp4;
    return (i + 1);  
} 


void quickSort(std::vector<Test> &arr, int low, int high)  
{  
    if (low < high)  
    {  
        /* pi is partitioning index, arr[p] is now  
        at right place */
        int pi = partition(arr, low, high);  
  
        // Separately sort elements before  
        // partition and after partition  
        quickSort(arr, low, pi - 1);  
        quickSort(arr, pi + 1, high);  
    }  
} 

void quicksortprice(std::vector<Test> &arr, int low, int high)  
{  
    if (low < high)  
    {  
        /* pi is partitioning index, arr[p] is now  
        at right place */
        int pi = partitionprice(arr, low, high);  
  		
        // Separately sort elements before  
        // partition and after partition  
        quicksortprice(arr, low, pi - 1);  
        quicksortprice(arr, pi + 1, high);  
    }  
}

std::vector<Test> topk(std::vector<Test> arr,int k, float a, float b)
{
  //std::cout<<arr.size();
  std::vector<Test> top_k;
  double d;
  int count=0;
  for(int i=0;i<arr.size();i++)
  {
   if(i<k)
    {
      
      d = sqrt(pow( arr[i].x-a,2)+pow(arr[i].y-b,2));
      arr[i].price = arr[i].w/pow(2.718,d);
      
      top_k.push_back(arr[i]);
       if(i==k-1)
       {
       	 
         sort(top_k.begin(),top_k.end(),compare);
       
        }
    }
    else
    {
      if(arr[i].w<top_k[k-1].price)
      {
      	std::cout<<count<<"\n";
        return top_k;
      }
      else
      {
        d = sqrt(pow( arr[i].x-a,2)+pow(arr[i].y-b,2));
        arr[i].price = arr[i].w/pow(2.718,d);
        if(arr[i].price>=top_k[k-1].price)
        {
          count++;
          top_k[k-1].x = arr[i].x;
          std::cout<<"\t";
          top_k[k-1].y = arr[i].y;
          //std::cout<<"\t";
          top_k[k-1].w = arr[i].w;
          //std::cout<<"\t";
          top_k[k-1].price = arr[i].price;
          
          quicksortprice(top_k,0,k-1);       
        }
        }
      }
    }
   std::cout<<count<<"\n";
  return top_k;
}
  
using namespace std::chrono; 
int main(int argc, char **argv)
{
 // sleep(5);
  //Open input file 
  Apollonius_site_2  site;
  std::vector<Test> val;
  float a,b,euclidianDist;
  Point_2 p;
  int k=10;
  std::ifstream ips("queries1.dt.cin");
   std::ifstream ifs("sites.cin");
  assert( ifs );
   while ( ifs >> site )
  {
    val.push_back({site.x(),site.y(),site.weight()});
  }
  ifs.close();
  std::cout<<"QuickSort ";
  quickSort(val, 0, val.size()-1);
  std::ofstream sitefile;
  std::ofstream myfile;
  std::ofstream timefile;
  myfile.open ("FinalOutput1.txt");
  timefile.open ("Time1.txt");
  while(ips>>p)
  {
    auto start_clock30 = high_resolution_clock::now(); 
    a = p.x();
    b = p.y(); 
    std::vector<Test> Output = topk(val,k,a,b);
    myfile<<"-----------------------------------------------------"<<"\n";
    myfile<<"****The top "<<k<<" ads for points "<<a<<" "<<b<<" are **** " <<"\n";
    for(int z=0;z<k;z++)
    {
       myfile<<z+1<<")"<<Output[z].x<<" "<<Output[z].y<<"\n";
    }
  auto stop_clock30 = high_resolution_clock::now();
  auto duration = duration_cast<microseconds>(stop_clock30 - start_clock30); 
  myfile << "\n\nTime taken by function: "
        << duration.count() << " microseconds"; 
   myfile<<"\n";
   timefile<< duration.count(); 
   timefile<<"\n";
 }
myfile.close();
timefile.close();
ips.close();
return 0;
}
